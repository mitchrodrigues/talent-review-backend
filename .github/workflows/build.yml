name: CI / CD
on:
  push:
    branches: [main]

env:
  GITHUB_REF: ${{ github.ref }}
  IMAGE: ${{ github.event.repository.name }}
  REGISTRY_HOSTNAME: us-west1-docker.pkg.dev/talent-review-428019/talent-radar
  PROJECT_ID: talent-review-428019
  DEPLOYMENT_NAME: talent-review-backend
  PRODUCTION_CLUSTER_NAME: talent-radar
  PRODUCTION_CLUSTER_ZONE: us-west1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo ${{ github }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ^1.22
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.59

      - name: Vet
        run: go vet ./...

      - name: Test
        run: go test ./...

  docker:
    name: Docker Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Setup gcloud CLI
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - run: |
          gcloud auth configure-docker us-west1-docker.pkg.dev

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker Build
        run: |
          docker build \
            -t "$REGISTRY_HOSTNAME"/"$IMAGE":"${{ steps.vars.outputs.sha_short }}" \
            -t "$REGISTRY_HOSTNAME"/"$IMAGE":"${GITHUB_REF##*/}" \
            -t "$REGISTRY_HOSTNAME"/"$IMAGE":latest \
            --build-arg GITHUB_SHA="${{ steps.vars.outputs.sha_short }}" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      - name: Docker Push
        run: |
          docker push "$REGISTRY_HOSTNAME"/"$IMAGE":"${{ steps.vars.outputs.sha_short }}"
          docker push "$REGISTRY_HOSTNAME"/"$IMAGE":"${GITHUB_REF##*/}"
          docker push "$REGISTRY_HOSTNAME"/"$IMAGE":latest

  production:
    name: Production - Deploy Web
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - id: "get-credentials"
        uses: "google-github-actions/get-gke-credentials@v1"
        with:
          cluster_name: ${{ env.PRODUCTION_CLUSTER_NAME }}
          location: ${{ env.PRODUCTION_CLUSTER_ZONE }}

      - id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # - name: Create migration job
      #   run: |
      #     cat <<EOF | kubectl apply -f -
      #     apiVersion: batch/v1
      #     kind: Job
      #     metadata:
      #       name: talent-review-migrations-${{ steps.vars.outputs.sha_short }}
      #     spec:
      #       template:
      #         spec:
      #           containers:
      #             - name: migrations
      #               image: $REGISTRY_HOSTNAME/$IMAGE:${{ steps.vars.outputs.sha_short }}
      #               command: ["bin/talent-review-backend"]
      #               args: ["migration", "migrate"]
      #           restartPolicy: Never
      #     EOF

      # - name: Wait for migration job to complete
      #   run: |
      #     kubectl wait --for=condition=complete --timeout=600s job/talent-review-migrations-${{ steps.vars.outputs.sha_short }}

      - run: |
          kubectl set image deployments/$DEPLOYMENT_NAME web="$REGISTRY_HOSTNAME"/"$IMAGE":"${{ steps.vars.outputs.sha_short }}"

      - name: migrations
        run: |
          kubectl exec deployment/$DEPLOYMENT_NAME -- bin/talent-review-backend migration migrate

      - name: "Wait for Deploy"
        run: |
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
